// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x6d, 0xde, 0xc6, 0x1c, 0xc1, 0xad, 0xb0, 0x9e, 0xaf, 0xa8, 0xe1, 0xd3, 0xf, 0x13, 0x1f, 0x22, 0xb9, 0x21, 0x58, 0xfe, 0x83, 0xd0, 0xc5, 0x86, 0x40, 0x80, 0xda, 0x9, 0xf7, 0xec, 0x54, 0xc, 0x7, 0x2f, 0x7b, 0xdb, 0x3e, 0x37, 0x8d, 0x9b, 0x65, 0xc8, 0x67, 0xbc, 0x77, 0x72, 0xd0, 0x5c, 0xae, 0xad, 0x7e, 0x64, 0xf, 0xa6, 0xcf, 0xa2, 0x20, 0x7a, 0xfe, 0x42, 0x25, 0x64, 0x83, 0xfa
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let iEX_API_KEY: String = {
            let encoded: [UInt8] = [
                0x1d, 0xb5, 0x99, 0x7f, 0xf7, 0x9b, 0x84, 0xfb, 0xcd, 0xcd, 0x83, 0xe5, 0x39, 0x70, 0x7e, 0x16, 0x8f, 0x43, 0x6a, 0x9c, 0xb5, 0xe9, 0xf7, 0xb0, 0x24, 0xe4, 0xeb, 0x68, 0x92, 0xdf, 0x32, 0x3a, 0x33, 0x17, 0x4b
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}

public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
