// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x6d, 0xde, 0xc6, 0x1c, 0xc1, 0xad, 0xb0, 0x9e, 0xaf, 0xa8, 0xe1, 0xd3, 0xf, 0x13, 0x1f, 0x22, 0xb9, 0x21, 0x58, 0xfe, 0x83, 0xd0, 0xc5, 0x86, 0x40, 0x80, 0xda, 0x9, 0xf7, 0xec, 0x54, 0xc, 0x7, 0x2f, 0x7b, 0xdb, 0x3e, 0x37, 0x8d, 0x9b, 0x65, 0xc8, 0x67, 0xbc, 0x77, 0x72, 0xd0, 0x5c, 0xae, 0xad, 0x7e, 0x64, 0xf, 0xa6, 0xcf, 0xa2, 0x20, 0x7a, 0xfe, 0x42, 0x25, 0x64, 0x83, 0xfa
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x55, 0xee, 0xfe, 0x2c, 0xf5, 0x9c, 0x85, 0xa8, 0x96, 0x98, 0x87, 0xe3, 0x6d, 0x71, 0x2b, 0x15, 0x89, 0x45, 0x3e, 0xcf, 0xba, 0xe8, 0xa1, 0xb7, 0x21, 0xb1, 0xed, 0x3f, 0xce, 0x8f, 0x66, 0x3b, 0x64, 0x17, 0x4d, 0xeb, 0xd, 0x54, 0xef, 0xa9, 0x54, 0xad, 0x51, 0xd8, 0x11, 0x42, 0xb2, 0x3a, 0xcd, 0xce, 0x1c, 0x57, 0x3d, 0x93, 0xf8, 0x90, 0x44, 0x4d, 0x9a, 0x76, 0x43, 0x57, 0xb7, 0x98, 0x5f, 0xba, 0xa7, 0x79, 0xf5, 0xcc, 0x86, 0xad, 0x97, 0xcc, 0xd2, 0xb7, 0x37, 0x75, 0x7c, 0x16, 0x8a, 0x15, 0x6c, 0xc7, 0xb6, 0xe1, 0xa6, 0xbe, 0x24, 0xb5, 0xeb, 0x6d, 0xc4, 0x8f, 0x31, 0x38, 0x37, 0x17, 0x49, 0xbe, 0x5d, 0x56, 0xbc, 0xad, 0x4, 0xac, 0x51, 0x8e, 0x47, 0x45, 0xb4, 0x64, 0xca, 0x99, 0x46, 0x5d, 0x36, 0xc5, 0xfd, 0xc6, 0x14, 0x49, 0xc8, 0x73, 0x11, 0, 0xb4, 0xc9
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "8080415690f0bb470df198d1a1769c27c8603cb21e6df0bfccb32572d7d4f34b2dae4a638d3d8fc4344951c8d51d3ce4082eca16ad6207d8d4899c2d43614d73")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x3, 0x94, 0xf0, 0x2f, 0xf2, 0xcb, 0xda, 0xaa, 0xce, 0xef, 0xaa, 0xa7, 0x62, 0x24, 0x54, 0x58, 0xd6, 0x40, 0x1a, 0x84, 0xe1, 0xa0, 0xa2, 0xee, 0x2e, 0xda, 0x8f, 0x7c, 0x8f, 0xae, 0x10, 0x7b, 0x5f, 0x76, 0x33, 0xec, 0x4f, 0x67, 0xdc, 0xa8, 0x4a, 0xfe, 0x6, 0xcc, 0x4, 0x39, 0x97, 0x14, 0xc9, 0xcb, 0x14, 0x2f, 0x68, 0xee, 0x9b, 0xfa, 0x13, 0x18, 0xb5, 0x31, 0x55, 0xc, 0xf4, 0xbe, 0x3e, 0xa7, 0xf7, 0x4b, 0xf4, 0xcc, 0x87, 0xed, 0xec, 0xc7, 0x95, 0x99, 0x3d, 0x21, 0x5a, 0x57, 0x89, 0x11, 0x39, 0x8a, 0xd7, 0xb7, 0xf8, 0xbb
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "nJ633fj4aGKtm7KzoaBzbpghnZUuxBDwXYH7qPQ3/6apsKGHgfjKgHTX3bKsphwDSy1W5a7sCotJ22Eu00atTg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x5c, 0xe8, 0xf1, 0x7e, 0xa4, 0xcc, 0x84, 0xa6, 0x82, 0x98, 0xd8, 0xe4, 0x6e, 0x3e, 0x2b, 0x43, 0x8c, 0x43, 0x75, 0xc7, 0xb0, 0xb3, 0xa3, 0xab, 0x76, 0xb0, 0xbc, 0x3f, 0xc3, 0x88, 0x30, 0x3c, 0x30, 0x17, 0x1f, 0xba
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "167bea48-097a-4a5b-93cf-60f64dd078da")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x19, 0xac, 0xb3, 0x79
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb, 0xbf, 0xaa, 0x6f, 0xa4
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x59, 0xec
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x5d, 0xee, 0xf6, 0x2d
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x54, 0xec, 0xf4, 0x2f, 0xf2, 0x9a, 0x82, 0xae, 0x9c, 0x9e, 0xd9, 0xe6, 0x3b, 0x24, 0x28, 0x17, 0x81, 0x11, 0x6f, 0xc7, 0xb1, 0xe2, 0xf6, 0xb5, 0x77, 0xb2, 0xea, 0x3a, 0xc1, 0xd4, 0x61, 0x38, 0x30, 0x18, 0x4e, 0xe3, 0xe, 0
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x40, 0xea, 0xf4
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x5e, 0xf0, 0xf7, 0x28
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x1f, 0xbb, 0xa7, 0x70, 0x9e, 0x89, 0xdc, 0xf7, 0xc2, 0xf7, 0x92, 0xbb, 0x6e, 0x77, 0x66
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
